// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: carts.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addVariantToCart = `-- name: AddVariantToCart :one
INSERT INTO carts_variants (cart_id, product_variant_id, quantity, price_per_item)
VALUES ($1, $2, $3, $4)
RETURNING cart_id, product_variant_id, quantity, price_per_item, created_at, updated_at
`

type AddVariantToCartParams struct {
	CartID           uuid.UUID `json:"cart_id"`
	ProductVariantID uuid.UUID `json:"product_variant_id"`
	Quantity         int32     `json:"quantity"`
	PricePerItem     float64   `json:"price_per_item"`
}

func (q *Queries) AddVariantToCart(ctx context.Context, arg AddVariantToCartParams) (CartsVariant, error) {
	row := q.db.QueryRowContext(ctx, addVariantToCart,
		arg.CartID,
		arg.ProductVariantID,
		arg.Quantity,
		arg.PricePerItem,
	)
	var i CartsVariant
	err := row.Scan(
		&i.CartID,
		&i.ProductVariantID,
		&i.Quantity,
		&i.PricePerItem,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const clearCartItems = `-- name: ClearCartItems :exec
DELETE FROM carts_variants
WHERE cart_id = $1
`

func (q *Queries) ClearCartItems(ctx context.Context, cartID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, clearCartItems, cartID)
	return err
}

const createCart = `-- name: CreateCart :one
INSERT INTO carts (user_id)
VALUES ($1)
RETURNING id, user_id, created_at, updated_at
`

type CreateCartRow struct {
	ID        uuid.UUID     `json:"id"`
	UserID    uuid.NullUUID `json:"user_id"`
	CreatedAt sql.NullTime  `json:"created_at"`
	UpdatedAt sql.NullTime  `json:"updated_at"`
}

func (q *Queries) CreateCart(ctx context.Context, userID uuid.NullUUID) (CreateCartRow, error) {
	row := q.db.QueryRowContext(ctx, createCart, userID)
	var i CreateCartRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCart = `-- name: DeleteCart :exec
DELETE FROM carts
WHERE id = $1
`

func (q *Queries) DeleteCart(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCart, id)
	return err
}

const deleteCartVariant = `-- name: DeleteCartVariant :exec
DELETE FROM carts_variants
WHERE cart_id = $1
  AND product_variant_id = $2
`

type DeleteCartVariantParams struct {
	CartID           uuid.UUID `json:"cart_id"`
	ProductVariantID uuid.UUID `json:"product_variant_id"`
}

func (q *Queries) DeleteCartVariant(ctx context.Context, arg DeleteCartVariantParams) error {
	_, err := q.db.ExecContext(ctx, deleteCartVariant, arg.CartID, arg.ProductVariantID)
	return err
}

const getCartById = `-- name: GetCartById :one
SELECT id, user_id, status, created_at, updated_at FROM carts
WHERE id = $1
`

func (q *Queries) GetCartById(ctx context.Context, id uuid.UUID) (Cart, error) {
	row := q.db.QueryRowContext(ctx, getCartById, id)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCartDetailsByCartId = `-- name: GetCartDetailsByCartId :many
SELECT
  cv.cart_id,
  cv.product_variant_id,
  cv.quantity,
  cv.price_per_item,
  v.sku,
  v.price AS variant_price,
  v.stock_quantity,
  v.image_url AS variant_image,
  v.variant_name,
  p.id AS product_id,
  p.name AS product_name,
  p.slug AS product_slug,
  p.image_url AS product_image
FROM carts_variants cv
JOIN product_variants v ON cv.product_variant_id = v.id
JOIN products p ON v.product_id = p.id
WHERE cv.cart_id = $1
`

type GetCartDetailsByCartIdRow struct {
	CartID           uuid.UUID      `json:"cart_id"`
	ProductVariantID uuid.UUID      `json:"product_variant_id"`
	Quantity         int32          `json:"quantity"`
	PricePerItem     float64        `json:"price_per_item"`
	Sku              string         `json:"sku"`
	VariantPrice     float64        `json:"variant_price"`
	StockQuantity    int32          `json:"stock_quantity"`
	VariantImage     sql.NullString `json:"variant_image"`
	VariantName      sql.NullString `json:"variant_name"`
	ProductID        uuid.UUID      `json:"product_id"`
	ProductName      string         `json:"product_name"`
	ProductSlug      string         `json:"product_slug"`
	ProductImage     sql.NullString `json:"product_image"`
}

func (q *Queries) GetCartDetailsByCartId(ctx context.Context, cartID uuid.UUID) ([]GetCartDetailsByCartIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getCartDetailsByCartId, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCartDetailsByCartIdRow
	for rows.Next() {
		var i GetCartDetailsByCartIdRow
		if err := rows.Scan(
			&i.CartID,
			&i.ProductVariantID,
			&i.Quantity,
			&i.PricePerItem,
			&i.Sku,
			&i.VariantPrice,
			&i.StockQuantity,
			&i.VariantImage,
			&i.VariantName,
			&i.ProductID,
			&i.ProductName,
			&i.ProductSlug,
			&i.ProductImage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCartDetailsWithLivePrice = `-- name: GetCartDetailsWithLivePrice :many
SELECT
  cv.cart_id,
  cv.product_variant_id,
  cv.quantity,
  v.price AS current_price,
  v.sku,
  v.stock_quantity,
  v.image_url AS variant_image,
  v.variant_name,
  p.id AS product_id,
  p.name AS product_name,
  p.slug AS product_slug,
  p.image_url AS product_image
FROM carts_variants cv
JOIN product_variants v ON cv.product_variant_id = v.id
JOIN products p ON v.product_id = p.id
WHERE cv.cart_id = $1
`

type GetCartDetailsWithLivePriceRow struct {
	CartID           uuid.UUID      `json:"cart_id"`
	ProductVariantID uuid.UUID      `json:"product_variant_id"`
	Quantity         int32          `json:"quantity"`
	CurrentPrice     float64        `json:"current_price"`
	Sku              string         `json:"sku"`
	StockQuantity    int32          `json:"stock_quantity"`
	VariantImage     sql.NullString `json:"variant_image"`
	VariantName      sql.NullString `json:"variant_name"`
	ProductID        uuid.UUID      `json:"product_id"`
	ProductName      string         `json:"product_name"`
	ProductSlug      string         `json:"product_slug"`
	ProductImage     sql.NullString `json:"product_image"`
}

func (q *Queries) GetCartDetailsWithLivePrice(ctx context.Context, cartID uuid.UUID) ([]GetCartDetailsWithLivePriceRow, error) {
	rows, err := q.db.QueryContext(ctx, getCartDetailsWithLivePrice, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCartDetailsWithLivePriceRow
	for rows.Next() {
		var i GetCartDetailsWithLivePriceRow
		if err := rows.Scan(
			&i.CartID,
			&i.ProductVariantID,
			&i.Quantity,
			&i.CurrentPrice,
			&i.Sku,
			&i.StockQuantity,
			&i.VariantImage,
			&i.VariantName,
			&i.ProductID,
			&i.ProductName,
			&i.ProductSlug,
			&i.ProductImage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCartDetailsWithSnapshotPrice = `-- name: GetCartDetailsWithSnapshotPrice :many
SELECT
  cv.cart_id,
  cv.product_variant_id,
  cv.quantity,
  cv.price_per_item,
  v.sku,
  v.price AS variant_price,
  v.stock_quantity,
  v.image_url AS variant_image,
  v.variant_name,
  p.id AS product_id,
  p.name AS product_name,
  p.slug AS product_slug,
  p.image_url AS product_image
FROM carts_variants cv
JOIN product_variants v ON cv.product_variant_id = v.id
JOIN products p ON v.product_id = p.id
WHERE cv.cart_id = $1
ORDER BY cv.created_at ASC
`

type GetCartDetailsWithSnapshotPriceRow struct {
	CartID           uuid.UUID      `json:"cart_id"`
	ProductVariantID uuid.UUID      `json:"product_variant_id"`
	Quantity         int32          `json:"quantity"`
	PricePerItem     float64        `json:"price_per_item"`
	Sku              string         `json:"sku"`
	VariantPrice     float64        `json:"variant_price"`
	StockQuantity    int32          `json:"stock_quantity"`
	VariantImage     sql.NullString `json:"variant_image"`
	VariantName      sql.NullString `json:"variant_name"`
	ProductID        uuid.UUID      `json:"product_id"`
	ProductName      string         `json:"product_name"`
	ProductSlug      string         `json:"product_slug"`
	ProductImage     sql.NullString `json:"product_image"`
}

func (q *Queries) GetCartDetailsWithSnapshotPrice(ctx context.Context, cartID uuid.UUID) ([]GetCartDetailsWithSnapshotPriceRow, error) {
	rows, err := q.db.QueryContext(ctx, getCartDetailsWithSnapshotPrice, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCartDetailsWithSnapshotPriceRow
	for rows.Next() {
		var i GetCartDetailsWithSnapshotPriceRow
		if err := rows.Scan(
			&i.CartID,
			&i.ProductVariantID,
			&i.Quantity,
			&i.PricePerItem,
			&i.Sku,
			&i.VariantPrice,
			&i.StockQuantity,
			&i.VariantImage,
			&i.VariantName,
			&i.ProductID,
			&i.ProductName,
			&i.ProductSlug,
			&i.ProductImage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCartItemsCount = `-- name: GetCartItemsCount :one
SELECT COUNT(*)
FROM carts_variants
WHERE cart_id = $1
`

func (q *Queries) GetCartItemsCount(ctx context.Context, cartID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCartItemsCount, cartID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCartProductsByCartId = `-- name: GetCartProductsByCartId :many
SELECT cart_id, product_variant_id, quantity, price_per_item, created_at, updated_at FROM carts_variants
WHERE cart_id = $1
`

func (q *Queries) GetCartProductsByCartId(ctx context.Context, cartID uuid.UUID) ([]CartsVariant, error) {
	rows, err := q.db.QueryContext(ctx, getCartProductsByCartId, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CartsVariant
	for rows.Next() {
		var i CartsVariant
		if err := rows.Scan(
			&i.CartID,
			&i.ProductVariantID,
			&i.Quantity,
			&i.PricePerItem,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCartsByUserId = `-- name: GetCartsByUserId :many
SELECT id, user_id, status, created_at, updated_at FROM carts
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetCartsByUserId(ctx context.Context, userID uuid.NullUUID) ([]Cart, error) {
	rows, err := q.db.QueryContext(ctx, getCartsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cart
	for rows.Next() {
		var i Cart
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalCartPrice = `-- name: GetTotalCartPrice :one
SELECT SUM(quantity * price_per_item) AS total
FROM carts_variants 
WHERE cart_id = $1
`

func (q *Queries) GetTotalCartPrice(ctx context.Context, cartID uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getTotalCartPrice, cartID)
	var total string
	err := row.Scan(&total)
	return total, err
}

const markCartsAsAbandoned = `-- name: MarkCartsAsAbandoned :exec
UPDATE carts
SET status = 'abandoned', updated_at = NOW()
WHERE status = 'new' AND updated_at < $1
`

func (q *Queries) MarkCartsAsAbandoned(ctx context.Context, threshold sql.NullTime) error {
	_, err := q.db.ExecContext(ctx, markCartsAsAbandoned, threshold)
	return err
}

const updateCartOwner = `-- name: UpdateCartOwner :one
UPDATE carts
SET user_id = $1
WHERE id = $2
RETURNING id, user_id, status, created_at, updated_at
`

type UpdateCartOwnerParams struct {
	UserID uuid.NullUUID `json:"user_id"`
	ID     uuid.UUID     `json:"id"`
}

func (q *Queries) UpdateCartOwner(ctx context.Context, arg UpdateCartOwnerParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, updateCartOwner, arg.UserID, arg.ID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCartStatus = `-- name: UpdateCartStatus :one
UPDATE carts
SET status = $1, updated_at = NOW()
WHERE id = $2
RETURNING id, user_id, status, created_at, updated_at
`

type UpdateCartStatusParams struct {
	Status CartStatus `json:"status"`
	CartID uuid.UUID  `json:"cart_id"`
}

func (q *Queries) UpdateCartStatus(ctx context.Context, arg UpdateCartStatusParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, updateCartStatus, arg.Status, arg.CartID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCartVariant = `-- name: UpdateCartVariant :one
INSERT INTO carts_variants (cart_id, product_variant_id, quantity, price_per_item)
VALUES ($1, $2, $3, $4)
ON CONFLICT (cart_id, product_variant_id) DO UPDATE
SET 
  quantity = EXCLUDED.quantity,
  price_per_item = EXCLUDED.price_per_item,
  updated_at = CURRENT_TIMESTAMP
RETURNING cart_id, product_variant_id, quantity, price_per_item, created_at, updated_at
`

type UpdateCartVariantParams struct {
	CartID           uuid.UUID `json:"cart_id"`
	ProductVariantID uuid.UUID `json:"product_variant_id"`
	Quantity         int32     `json:"quantity"`
	PricePerItem     float64   `json:"price_per_item"`
}

func (q *Queries) UpdateCartVariant(ctx context.Context, arg UpdateCartVariantParams) (CartsVariant, error) {
	row := q.db.QueryRowContext(ctx, updateCartVariant,
		arg.CartID,
		arg.ProductVariantID,
		arg.Quantity,
		arg.PricePerItem,
	)
	var i CartsVariant
	err := row.Scan(
		&i.CartID,
		&i.ProductVariantID,
		&i.Quantity,
		&i.PricePerItem,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCartVariantQuantity = `-- name: UpdateCartVariantQuantity :one
UPDATE carts_variants
SET quantity = $1
WHERE cart_id = $2
  AND product_variant_id = $3
RETURNING cart_id, product_variant_id, quantity, price_per_item, created_at, updated_at
`

type UpdateCartVariantQuantityParams struct {
	Quantity         int32     `json:"quantity"`
	CartID           uuid.UUID `json:"cart_id"`
	ProductVariantID uuid.UUID `json:"product_variant_id"`
}

func (q *Queries) UpdateCartVariantQuantity(ctx context.Context, arg UpdateCartVariantQuantityParams) (CartsVariant, error) {
	row := q.db.QueryRowContext(ctx, updateCartVariantQuantity, arg.Quantity, arg.CartID, arg.ProductVariantID)
	var i CartsVariant
	err := row.Scan(
		&i.CartID,
		&i.ProductVariantID,
		&i.Quantity,
		&i.PricePerItem,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertVariantToCart = `-- name: UpsertVariantToCart :one
INSERT INTO carts_variants (cart_id, product_variant_id, quantity, price_per_item)
VALUES (
  $1,
  $2,
  $3,
  $4
)
ON CONFLICT (cart_id, product_variant_id) DO UPDATE
SET 
  quantity = carts_variants.quantity + EXCLUDED.quantity,
  price_per_item = EXCLUDED.price_per_item,
  updated_at = CURRENT_TIMESTAMP
RETURNING cart_id, product_variant_id, quantity, price_per_item, created_at, updated_at
`

type UpsertVariantToCartParams struct {
	CartID           uuid.UUID `json:"cart_id"`
	ProductVariantID uuid.UUID `json:"product_variant_id"`
	Quantity         int32     `json:"quantity"`
	PricePerItem     float64   `json:"price_per_item"`
}

func (q *Queries) UpsertVariantToCart(ctx context.Context, arg UpsertVariantToCartParams) (CartsVariant, error) {
	row := q.db.QueryRowContext(ctx, upsertVariantToCart,
		arg.CartID,
		arg.ProductVariantID,
		arg.Quantity,
		arg.PricePerItem,
	)
	var i CartsVariant
	err := row.Scan(
		&i.CartID,
		&i.ProductVariantID,
		&i.Quantity,
		&i.PricePerItem,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
