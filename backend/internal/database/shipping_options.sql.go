// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: shipping_options.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createShippingOption = `-- name: CreateShippingOption :one
INSERT INTO shipping_options (name, description, price, estimated_days, is_active)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, description, price, estimated_days, sort_order, is_active, created_at, updated_at
`

type CreateShippingOptionParams struct {
	Name          string         `json:"name"`
	Description   sql.NullString `json:"description"`
	Price         string         `json:"price"`
	EstimatedDays string         `json:"estimated_days"`
	IsActive      bool           `json:"is_active"`
}

func (q *Queries) CreateShippingOption(ctx context.Context, arg CreateShippingOptionParams) (ShippingOption, error) {
	row := q.db.QueryRowContext(ctx, createShippingOption,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.EstimatedDays,
		arg.IsActive,
	)
	var i ShippingOption
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.EstimatedDays,
		&i.SortOrder,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteShippingOption = `-- name: DeleteShippingOption :execrows
DELETE FROM shipping_options
WHERE id = $1
`

func (q *Queries) DeleteShippingOption(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteShippingOption, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getActiveShippingOptions = `-- name: GetActiveShippingOptions :many
SELECT id, name, description, price, estimated_days, sort_order, is_active, created_at, updated_at FROM shipping_options
WHERE is_active = true
ORDER BY sort_order ASC
`

func (q *Queries) GetActiveShippingOptions(ctx context.Context) ([]ShippingOption, error) {
	rows, err := q.db.QueryContext(ctx, getActiveShippingOptions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShippingOption
	for rows.Next() {
		var i ShippingOption
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.EstimatedDays,
			&i.SortOrder,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShippingOptions = `-- name: GetShippingOptions :many
SELECT id, name, description, price, estimated_days, sort_order, is_active, created_at, updated_at FROM shipping_options
ORDER BY sort_order ASC
`

func (q *Queries) GetShippingOptions(ctx context.Context) ([]ShippingOption, error) {
	rows, err := q.db.QueryContext(ctx, getShippingOptions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShippingOption
	for rows.Next() {
		var i ShippingOption
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.EstimatedDays,
			&i.SortOrder,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectShippingOptionById = `-- name: SelectShippingOptionById :one
SELECT id, name, description, price, estimated_days, sort_order, is_active, created_at, updated_at FROM shipping_options WHERE id = $1
`

func (q *Queries) SelectShippingOptionById(ctx context.Context, id uuid.UUID) (ShippingOption, error) {
	row := q.db.QueryRowContext(ctx, selectShippingOptionById, id)
	var i ShippingOption
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.EstimatedDays,
		&i.SortOrder,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const toggleShippingOptionStatus = `-- name: ToggleShippingOptionStatus :one
UPDATE shipping_options
SET is_active = $1
WHERE id = $2
RETURNING id, is_active
`

type ToggleShippingOptionStatusParams struct {
	IsActive bool      `json:"is_active"`
	ID       uuid.UUID `json:"id"`
}

type ToggleShippingOptionStatusRow struct {
	ID       uuid.UUID `json:"id"`
	IsActive bool      `json:"is_active"`
}

func (q *Queries) ToggleShippingOptionStatus(ctx context.Context, arg ToggleShippingOptionStatusParams) (ToggleShippingOptionStatusRow, error) {
	row := q.db.QueryRowContext(ctx, toggleShippingOptionStatus, arg.IsActive, arg.ID)
	var i ToggleShippingOptionStatusRow
	err := row.Scan(&i.ID, &i.IsActive)
	return i, err
}

const updateShippingOption = `-- name: UpdateShippingOption :one
UPDATE shipping_options
SET name = $1,
    description = $2,
    price = $3,
    estimated_days = $4,
    sort_order = $5,
    is_active = $6
WHERE id = $7
RETURNING id, name, description, price, estimated_days, sort_order, is_active, created_at, updated_at
`

type UpdateShippingOptionParams struct {
	Name          string         `json:"name"`
	Description   sql.NullString `json:"description"`
	Price         string         `json:"price"`
	EstimatedDays string         `json:"estimated_days"`
	SortOrder     int32          `json:"sort_order"`
	IsActive      bool           `json:"is_active"`
	ID            uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateShippingOption(ctx context.Context, arg UpdateShippingOptionParams) (ShippingOption, error) {
	row := q.db.QueryRowContext(ctx, updateShippingOption,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.EstimatedDays,
		arg.SortOrder,
		arg.IsActive,
		arg.ID,
	)
	var i ShippingOption
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.EstimatedDays,
		&i.SortOrder,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
