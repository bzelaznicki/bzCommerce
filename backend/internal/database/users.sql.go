// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const countFilteredUsers = `-- name: CountFilteredUsers :one
SELECT COUNT(*)
FROM users
WHERE full_name ILIKE $1 OR email ILIKE $1
`

func (q *Queries) CountFilteredUsers(ctx context.Context, fullName string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countFilteredUsers, fullName)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, full_name, password_hash)
VALUES ($1, $2, $3)
RETURNING id, email, full_name, created_at, updated_at, is_admin, is_active, disabled_at
`

type CreateUserParams struct {
	Email        string `json:"email"`
	FullName     string `json:"full_name"`
	PasswordHash string `json:"password_hash"`
}

type CreateUserRow struct {
	ID         uuid.UUID    `json:"id"`
	Email      string       `json:"email"`
	FullName   string       `json:"full_name"`
	CreatedAt  time.Time    `json:"created_at"`
	UpdatedAt  time.Time    `json:"updated_at"`
	IsAdmin    bool         `json:"is_admin"`
	IsActive   bool         `json:"is_active"`
	DisabledAt sql.NullTime `json:"disabled_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.FullName, arg.PasswordHash)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
		&i.IsActive,
		&i.DisabledAt,
	)
	return i, err
}

const deleteUserById = `-- name: DeleteUserById :execrows
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUserById(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteUserById, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const disableUser = `-- name: DisableUser :one
UPDATE users
SET
  is_active = FALSE,
  disabled_at = CASE
    WHEN disabled_at IS NULL THEN CURRENT_TIMESTAMP
    ELSE disabled_at
  END,
  updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, full_name, email, created_at, updated_at, is_active, disabled_at
`

type DisableUserRow struct {
	ID         uuid.UUID    `json:"id"`
	FullName   string       `json:"full_name"`
	Email      string       `json:"email"`
	CreatedAt  time.Time    `json:"created_at"`
	UpdatedAt  time.Time    `json:"updated_at"`
	IsActive   bool         `json:"is_active"`
	DisabledAt sql.NullTime `json:"disabled_at"`
}

func (q *Queries) DisableUser(ctx context.Context, id uuid.UUID) (DisableUserRow, error) {
	row := q.db.QueryRowContext(ctx, disableUser, id)
	var i DisableUserRow
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
		&i.DisabledAt,
	)
	return i, err
}

const enableUser = `-- name: EnableUser :one
UPDATE users
SET is_active = TRUE,
    disabled_at = NULL,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, full_name, email, created_at, updated_at, is_active
`

type EnableUserRow struct {
	ID        uuid.UUID `json:"id"`
	FullName  string    `json:"full_name"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	IsActive  bool      `json:"is_active"`
}

func (q *Queries) EnableUser(ctx context.Context, id uuid.UUID) (EnableUserRow, error) {
	row := q.db.QueryRowContext(ctx, enableUser, id)
	var i EnableUserRow
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const getUserAccountById = `-- name: GetUserAccountById :one
SELECT id, email, full_name, created_at, updated_at, is_admin, is_active, disabled_at
FROM users
WHERE id = $1
`

type GetUserAccountByIdRow struct {
	ID         uuid.UUID    `json:"id"`
	Email      string       `json:"email"`
	FullName   string       `json:"full_name"`
	CreatedAt  time.Time    `json:"created_at"`
	UpdatedAt  time.Time    `json:"updated_at"`
	IsAdmin    bool         `json:"is_admin"`
	IsActive   bool         `json:"is_active"`
	DisabledAt sql.NullTime `json:"disabled_at"`
}

func (q *Queries) GetUserAccountById(ctx context.Context, id uuid.UUID) (GetUserAccountByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserAccountById, id)
	var i GetUserAccountByIdRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
		&i.IsActive,
		&i.DisabledAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, full_name, password_hash, created_at, updated_at, is_admin, is_active, disabled_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
		&i.IsActive,
		&i.DisabledAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, full_name, password_hash, created_at, updated_at, is_admin, is_active, disabled_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
		&i.IsActive,
		&i.DisabledAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
  id,
  full_name,
  email,
  created_at,
  updated_at,
  is_admin,
  is_active,
  disabled_at
FROM users
`

type ListUsersRow struct {
	ID         uuid.UUID    `json:"id"`
	FullName   string       `json:"full_name"`
	Email      string       `json:"email"`
	CreatedAt  time.Time    `json:"created_at"`
	UpdatedAt  time.Time    `json:"updated_at"`
	IsAdmin    bool         `json:"is_admin"`
	IsActive   bool         `json:"is_active"`
	DisabledAt sql.NullTime `json:"disabled_at"`
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsAdmin,
			&i.IsActive,
			&i.DisabledAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserById = `-- name: UpdateUserById :one
UPDATE users
SET
  full_name = $1,
  email = $2,
  is_admin = $3,
  updated_at = NOW()
WHERE id = $4
RETURNING
  id,
  full_name,
  email,
  created_at,
  updated_at,
  is_admin,
  is_active,
  disabled_at
`

type UpdateUserByIdParams struct {
	FullName string    `json:"full_name"`
	Email    string    `json:"email"`
	IsAdmin  bool      `json:"is_admin"`
	ID       uuid.UUID `json:"id"`
}

type UpdateUserByIdRow struct {
	ID         uuid.UUID    `json:"id"`
	FullName   string       `json:"full_name"`
	Email      string       `json:"email"`
	CreatedAt  time.Time    `json:"created_at"`
	UpdatedAt  time.Time    `json:"updated_at"`
	IsAdmin    bool         `json:"is_admin"`
	IsActive   bool         `json:"is_active"`
	DisabledAt sql.NullTime `json:"disabled_at"`
}

func (q *Queries) UpdateUserById(ctx context.Context, arg UpdateUserByIdParams) (UpdateUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserById,
		arg.FullName,
		arg.Email,
		arg.IsAdmin,
		arg.ID,
	)
	var i UpdateUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
		&i.IsActive,
		&i.DisabledAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :execrows
UPDATE users
SET password_hash = $1
WHERE id = $2
`

type UpdateUserPasswordParams struct {
	Password string    `json:"password"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateUserPassword, arg.Password, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
