// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: countries.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createCountry = `-- name: CreateCountry :one
INSERT INTO countries (name, iso_code, is_active)
VALUES (
    $1,
    $2,
    $3
    )
    RETURNING id, name, iso_code, is_active, sort_order, created_at, updated_at
`

type CreateCountryParams struct {
	Name     string `json:"name"`
	IsoCode  string `json:"iso_code"`
	IsActive bool   `json:"is_active"`
}

func (q *Queries) CreateCountry(ctx context.Context, arg CreateCountryParams) (Country, error) {
	row := q.db.QueryRowContext(ctx, createCountry, arg.Name, arg.IsoCode, arg.IsActive)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsoCode,
		&i.IsActive,
		&i.SortOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCountryById = `-- name: DeleteCountryById :execrows
DELETE FROM countries WHERE id = $1
`

func (q *Queries) DeleteCountryById(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteCountryById, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getActiveCountries = `-- name: GetActiveCountries :many
SELECT id, name, iso_code, is_active, sort_order, created_at, updated_at FROM countries WHERE is_active = true ORDER BY sort_order ASC
`

func (q *Queries) GetActiveCountries(ctx context.Context) ([]Country, error) {
	rows, err := q.db.QueryContext(ctx, getActiveCountries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Country
	for rows.Next() {
		var i Country
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IsoCode,
			&i.IsActive,
			&i.SortOrder,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountries = `-- name: GetCountries :many
SELECT id, name, iso_code, is_active, sort_order, created_at, updated_at FROM countries ORDER BY sort_order ASC
`

func (q *Queries) GetCountries(ctx context.Context) ([]Country, error) {
	rows, err := q.db.QueryContext(ctx, getCountries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Country
	for rows.Next() {
		var i Country
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IsoCode,
			&i.IsActive,
			&i.SortOrder,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountryById = `-- name: GetCountryById :one
SELECT id, name, iso_code, is_active, sort_order, created_at, updated_at FROM countries WHERE id = $1
`

func (q *Queries) GetCountryById(ctx context.Context, id uuid.UUID) (Country, error) {
	row := q.db.QueryRowContext(ctx, getCountryById, id)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsoCode,
		&i.IsActive,
		&i.SortOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const toggleCountryStatus = `-- name: ToggleCountryStatus :one
UPDATE countries
SET is_active = $1
WHERE id = $2
RETURNING id, is_active
`

type ToggleCountryStatusParams struct {
	IsActive bool      `json:"is_active"`
	ID       uuid.UUID `json:"id"`
}

type ToggleCountryStatusRow struct {
	ID       uuid.UUID `json:"id"`
	IsActive bool      `json:"is_active"`
}

func (q *Queries) ToggleCountryStatus(ctx context.Context, arg ToggleCountryStatusParams) (ToggleCountryStatusRow, error) {
	row := q.db.QueryRowContext(ctx, toggleCountryStatus, arg.IsActive, arg.ID)
	var i ToggleCountryStatusRow
	err := row.Scan(&i.ID, &i.IsActive)
	return i, err
}

const updateCountryById = `-- name: UpdateCountryById :one
UPDATE countries SET 
    name = $1,
    iso_code = $2,
    is_active = $3,
    sort_order = $4

WHERE id = $5
RETURNING id, name, iso_code, is_active, sort_order, created_at, updated_at
`

type UpdateCountryByIdParams struct {
	Name      string    `json:"name"`
	IsoCode   string    `json:"iso_code"`
	IsActive  bool      `json:"is_active"`
	SortOrder int32     `json:"sort_order"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) UpdateCountryById(ctx context.Context, arg UpdateCountryByIdParams) (Country, error) {
	row := q.db.QueryRowContext(ctx, updateCountryById,
		arg.Name,
		arg.IsoCode,
		arg.IsActive,
		arg.SortOrder,
		arg.ID,
	)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsoCode,
		&i.IsActive,
		&i.SortOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
