// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users_addresses.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addUserAddress = `-- name: AddUserAddress :one
INSERT INTO users_addresses (
    user_id, 
    address, 
    city, 
    postal_code, 
    country_id, 
    phone, 
    is_shipping, 
    is_shipping_default,
    is_billing,
    is_billing_default
)
VALUES (
    $1, 
    $2, 
    $3, 
    $4, 
    $5, 
    $6, 
    $7, 
    $8,
    $9,
    $10
)
RETURNING id, user_id, name, address, city, postal_code, country_id, phone, is_shipping, is_shipping_default, is_billing, is_billing_default, created_at, updated_at
`

type AddUserAddressParams struct {
	UserID            uuid.UUID      `json:"user_id"`
	Address           sql.NullString `json:"address"`
	City              sql.NullString `json:"city"`
	PostalCode        sql.NullString `json:"postal_code"`
	Country           uuid.UUID      `json:"country"`
	Phone             string         `json:"phone"`
	IsShipping        bool           `json:"is_shipping"`
	IsShippingDefault bool           `json:"is_shipping_default"`
	IsBilling         bool           `json:"is_billing"`
	IsBillingDefault  bool           `json:"is_billing_default"`
}

func (q *Queries) AddUserAddress(ctx context.Context, arg AddUserAddressParams) (UsersAddress, error) {
	row := q.db.QueryRowContext(ctx, addUserAddress,
		arg.UserID,
		arg.Address,
		arg.City,
		arg.PostalCode,
		arg.Country,
		arg.Phone,
		arg.IsShipping,
		arg.IsShippingDefault,
		arg.IsBilling,
		arg.IsBillingDefault,
	)
	var i UsersAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Address,
		&i.City,
		&i.PostalCode,
		&i.CountryID,
		&i.Phone,
		&i.IsShipping,
		&i.IsShippingDefault,
		&i.IsBilling,
		&i.IsBillingDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserAddress = `-- name: DeleteUserAddress :exec
DELETE FROM users_addresses
WHERE id = $1
`

func (q *Queries) DeleteUserAddress(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserAddress, id)
	return err
}

const getUserAddressById = `-- name: GetUserAddressById :one
SELECT ua.id, ua.user_id, ua.name, ua.address, ua.city, ua.postal_code, ua.country_id, ua.phone, ua.is_shipping, ua.is_shipping_default, ua.is_billing, ua.is_billing_default, ua.created_at, ua.updated_at, c.name AS country FROM users_addresses ua
JOIN countries c ON ua.country_id = c.id
WHERE ua.id = $1
`

type GetUserAddressByIdRow struct {
	ID                uuid.UUID      `json:"id"`
	UserID            uuid.UUID      `json:"user_id"`
	Name              string         `json:"name"`
	Address           sql.NullString `json:"address"`
	City              sql.NullString `json:"city"`
	PostalCode        sql.NullString `json:"postal_code"`
	CountryID         uuid.UUID      `json:"country_id"`
	Phone             string         `json:"phone"`
	IsShipping        bool           `json:"is_shipping"`
	IsShippingDefault bool           `json:"is_shipping_default"`
	IsBilling         bool           `json:"is_billing"`
	IsBillingDefault  bool           `json:"is_billing_default"`
	CreatedAt         sql.NullTime   `json:"created_at"`
	UpdatedAt         sql.NullTime   `json:"updated_at"`
	Country           string         `json:"country"`
}

func (q *Queries) GetUserAddressById(ctx context.Context, id uuid.UUID) (GetUserAddressByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserAddressById, id)
	var i GetUserAddressByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Address,
		&i.City,
		&i.PostalCode,
		&i.CountryID,
		&i.Phone,
		&i.IsShipping,
		&i.IsShippingDefault,
		&i.IsBilling,
		&i.IsBillingDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Country,
	)
	return i, err
}

const getUserAddresses = `-- name: GetUserAddresses :many
SELECT ua.id, ua.user_id, ua.name, ua.address, ua.city, ua.postal_code, ua.country_id, ua.phone, ua.is_shipping, ua.is_shipping_default, ua.is_billing, ua.is_billing_default, ua.created_at, ua.updated_at, c.name AS country FROM users_addresses ua
JOIN countries c ON ua.country_id = c.id
WHERE ua.user_id = $1
ORDER BY created_at DESC
`

type GetUserAddressesRow struct {
	ID                uuid.UUID      `json:"id"`
	UserID            uuid.UUID      `json:"user_id"`
	Name              string         `json:"name"`
	Address           sql.NullString `json:"address"`
	City              sql.NullString `json:"city"`
	PostalCode        sql.NullString `json:"postal_code"`
	CountryID         uuid.UUID      `json:"country_id"`
	Phone             string         `json:"phone"`
	IsShipping        bool           `json:"is_shipping"`
	IsShippingDefault bool           `json:"is_shipping_default"`
	IsBilling         bool           `json:"is_billing"`
	IsBillingDefault  bool           `json:"is_billing_default"`
	CreatedAt         sql.NullTime   `json:"created_at"`
	UpdatedAt         sql.NullTime   `json:"updated_at"`
	Country           string         `json:"country"`
}

func (q *Queries) GetUserAddresses(ctx context.Context, userID uuid.UUID) ([]GetUserAddressesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserAddresses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserAddressesRow
	for rows.Next() {
		var i GetUserAddressesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Address,
			&i.City,
			&i.PostalCode,
			&i.CountryID,
			&i.Phone,
			&i.IsShipping,
			&i.IsShippingDefault,
			&i.IsBilling,
			&i.IsBillingDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Country,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setDefaultBillingAddress = `-- name: SetDefaultBillingAddress :exec
UPDATE users_addresses
SET is_billing_default = TRUE
WHERE id = $1
AND user_id = $2
RETURNING id, user_id, name, address, city, postal_code, country_id, phone, is_shipping, is_shipping_default, is_billing, is_billing_default, created_at, updated_at
`

type SetDefaultBillingAddressParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) SetDefaultBillingAddress(ctx context.Context, arg SetDefaultBillingAddressParams) error {
	_, err := q.db.ExecContext(ctx, setDefaultBillingAddress, arg.ID, arg.UserID)
	return err
}

const setDefaultShippingAddress = `-- name: SetDefaultShippingAddress :exec
UPDATE users_addresses
SET is_shipping_default = TRUE
WHERE id = $1
AND user_id = $2
RETURNING id, user_id, name, address, city, postal_code, country_id, phone, is_shipping, is_shipping_default, is_billing, is_billing_default, created_at, updated_at
`

type SetDefaultShippingAddressParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) SetDefaultShippingAddress(ctx context.Context, arg SetDefaultShippingAddressParams) error {
	_, err := q.db.ExecContext(ctx, setDefaultShippingAddress, arg.ID, arg.UserID)
	return err
}

const updateUserAddress = `-- name: UpdateUserAddress :one
UPDATE users_addresses
SET address = $1,
    city = $2,
    postal_code = $3,
    country_id = $4,
    phone = $5,
    is_shipping = $6,
    is_shipping_default = $7,
    is_billing = $8,
    is_billing_default = $9
WHERE id = $10
RETURNING id, user_id, name, address, city, postal_code, country_id, phone, is_shipping, is_shipping_default, is_billing, is_billing_default, created_at, updated_at
`

type UpdateUserAddressParams struct {
	Address           sql.NullString `json:"address"`
	City              sql.NullString `json:"city"`
	PostalCode        sql.NullString `json:"postal_code"`
	CountryID         uuid.UUID      `json:"country_id"`
	Phone             string         `json:"phone"`
	IsShipping        bool           `json:"is_shipping"`
	IsShippingDefault bool           `json:"is_shipping_default"`
	IsBilling         bool           `json:"is_billing"`
	IsBillingDefault  bool           `json:"is_billing_default"`
	ID                uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateUserAddress(ctx context.Context, arg UpdateUserAddressParams) (UsersAddress, error) {
	row := q.db.QueryRowContext(ctx, updateUserAddress,
		arg.Address,
		arg.City,
		arg.PostalCode,
		arg.CountryID,
		arg.Phone,
		arg.IsShipping,
		arg.IsShippingDefault,
		arg.IsBilling,
		arg.IsBillingDefault,
		arg.ID,
	)
	var i UsersAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Address,
		&i.City,
		&i.PostalCode,
		&i.CountryID,
		&i.Phone,
		&i.IsShipping,
		&i.IsShippingDefault,
		&i.IsBilling,
		&i.IsBillingDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
