// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payment_options.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPaymentOption = `-- name: CreatePaymentOption :one
INSERT INTO payment_options (name, description, is_active, sort_order)
VALUES(
    $1,
    $2,
    $3,
    $4
)
RETURNING id, name, description, is_active, sort_order, created_at, updated_at
`

type CreatePaymentOptionParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	IsActive    bool           `json:"is_active"`
	SortOrder   sql.NullInt32  `json:"sort_order"`
}

func (q *Queries) CreatePaymentOption(ctx context.Context, arg CreatePaymentOptionParams) (PaymentOption, error) {
	row := q.db.QueryRowContext(ctx, createPaymentOption,
		arg.Name,
		arg.Description,
		arg.IsActive,
		arg.SortOrder,
	)
	var i PaymentOption
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.SortOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePaymentOption = `-- name: DeletePaymentOption :exec
DELETE FROM payment_options
WHERE id = $1
`

func (q *Queries) DeletePaymentOption(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePaymentOption, id)
	return err
}

const getActivePaymentOptions = `-- name: GetActivePaymentOptions :many
SELECT id, name, description, is_active, sort_order, created_at, updated_at FROM payment_options
WHERE is_active = true
ORDER BY sort_order ASC
`

func (q *Queries) GetActivePaymentOptions(ctx context.Context) ([]PaymentOption, error) {
	rows, err := q.db.QueryContext(ctx, getActivePaymentOptions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentOption
	for rows.Next() {
		var i PaymentOption
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IsActive,
			&i.SortOrder,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaymentOptionById = `-- name: GetPaymentOptionById :one
SELECT id, name, description, is_active, sort_order, created_at, updated_at FROM payment_options WHERE id = $1
`

func (q *Queries) GetPaymentOptionById(ctx context.Context, id uuid.UUID) (PaymentOption, error) {
	row := q.db.QueryRowContext(ctx, getPaymentOptionById, id)
	var i PaymentOption
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.SortOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentOptions = `-- name: GetPaymentOptions :many
SELECT id, name, description, is_active, sort_order, created_at, updated_at FROM payment_options
ORDER BY sort_order ASC
`

func (q *Queries) GetPaymentOptions(ctx context.Context) ([]PaymentOption, error) {
	rows, err := q.db.QueryContext(ctx, getPaymentOptions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentOption
	for rows.Next() {
		var i PaymentOption
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IsActive,
			&i.SortOrder,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentOption = `-- name: UpdatePaymentOption :exec
UPDATE payment_options
SET name = $1,
description = $2,
sort_order = $3,
is_active = $4
where id = $5
`

type UpdatePaymentOptionParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	SortOrder   sql.NullInt32  `json:"sort_order"`
	IsActive    bool           `json:"is_active"`
	ID          uuid.UUID      `json:"id"`
}

func (q *Queries) UpdatePaymentOption(ctx context.Context, arg UpdatePaymentOptionParams) error {
	_, err := q.db.ExecContext(ctx, updatePaymentOption,
		arg.Name,
		arg.Description,
		arg.SortOrder,
		arg.IsActive,
		arg.ID,
	)
	return err
}
