// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type CartStatus string

const (
	CartStatusNew       CartStatus = "new"
	CartStatusAbandoned CartStatus = "abandoned"
	CartStatusCompleted CartStatus = "completed"
)

func (e *CartStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CartStatus(s)
	case string:
		*e = CartStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for CartStatus: %T", src)
	}
	return nil
}

type NullCartStatus struct {
	CartStatus CartStatus `json:"cart_status"`
	Valid      bool       `json:"valid"` // Valid is true if CartStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCartStatus) Scan(value interface{}) error {
	if value == nil {
		ns.CartStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CartStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCartStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CartStatus), nil
}

type OrderStatus string

const (
	OrderStatusPending    OrderStatus = "pending"
	OrderStatusPaid       OrderStatus = "paid"
	OrderStatusProcessing OrderStatus = "processing"
	OrderStatusShipped    OrderStatus = "shipped"
	OrderStatusCancelled  OrderStatus = "cancelled"
	OrderStatusRefunded   OrderStatus = "refunded"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus `json:"order_status"`
	Valid       bool        `json:"valid"` // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type Cart struct {
	ID        uuid.UUID     `json:"id"`
	UserID    uuid.NullUUID `json:"user_id"`
	Status    CartStatus    `json:"status"`
	CreatedAt sql.NullTime  `json:"created_at"`
	UpdatedAt sql.NullTime  `json:"updated_at"`
}

type CartsVariant struct {
	CartID           uuid.UUID    `json:"cart_id"`
	ProductVariantID uuid.UUID    `json:"product_variant_id"`
	Quantity         int32        `json:"quantity"`
	PricePerItem     float64      `json:"price_per_item"`
	CreatedAt        sql.NullTime `json:"created_at"`
	UpdatedAt        sql.NullTime `json:"updated_at"`
}

type Category struct {
	ID          uuid.UUID      `json:"id"`
	Name        string         `json:"name"`
	Slug        string         `json:"slug"`
	Description sql.NullString `json:"description"`
	ParentID    uuid.NullUUID  `json:"parent_id"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

type Country struct {
	ID        uuid.UUID     `json:"id"`
	Name      string        `json:"name"`
	IsoCode   string        `json:"iso_code"`
	IsActive  bool          `json:"is_active"`
	SortOrder sql.NullInt32 `json:"sort_order"`
	CreatedAt sql.NullTime  `json:"created_at"`
	UpdatedAt sql.NullTime  `json:"updated_at"`
}

type Order struct {
	ID                 uuid.UUID      `json:"id"`
	UserID             uuid.NullUUID  `json:"user_id"`
	Status             OrderStatus    `json:"status"`
	TotalPrice         float64        `json:"total_price"`
	CreatedAt          sql.NullTime   `json:"created_at"`
	UpdatedAt          sql.NullTime   `json:"updated_at"`
	CustomerEmail      string         `json:"customer_email"`
	ShippingName       sql.NullString `json:"shipping_name"`
	ShippingAddress    sql.NullString `json:"shipping_address"`
	ShippingCity       sql.NullString `json:"shipping_city"`
	ShippingPostalCode sql.NullString `json:"shipping_postal_code"`
	ShippingCountry    sql.NullString `json:"shipping_country"`
	ShippingPhone      string         `json:"shipping_phone"`
	BillingName        sql.NullString `json:"billing_name"`
	BillingAddress     sql.NullString `json:"billing_address"`
	BillingCity        sql.NullString `json:"billing_city"`
	BillingPostalCode  sql.NullString `json:"billing_postal_code"`
	BillingCountry     sql.NullString `json:"billing_country"`
	ShippingOptionID   uuid.NullUUID  `json:"shipping_option_id"`
	ShippingPrice      float64        `json:"shipping_price"`
	PaymentOptionID    uuid.NullUUID  `json:"payment_option_id"`
}

type OrdersVariant struct {
	OrderID          uuid.UUID    `json:"order_id"`
	ProductVariantID uuid.UUID    `json:"product_variant_id"`
	Quantity         int32        `json:"quantity"`
	PricePerItem     float64      `json:"price_per_item"`
	TotalPrice       float64      `json:"total_price"`
	CreatedAt        sql.NullTime `json:"created_at"`
	UpdatedAt        sql.NullTime `json:"updated_at"`
}

type PaymentOption struct {
	ID          uuid.UUID      `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	IsActive    bool           `json:"is_active"`
	SortOrder   sql.NullInt32  `json:"sort_order"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

type Product struct {
	ID          uuid.UUID      `json:"id"`
	CategoryID  uuid.UUID      `json:"category_id"`
	Name        string         `json:"name"`
	Slug        string         `json:"slug"`
	ImageUrl    sql.NullString `json:"image_url"`
	Description sql.NullString `json:"description"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

type ProductVariant struct {
	ID            uuid.UUID      `json:"id"`
	ProductID     uuid.UUID      `json:"product_id"`
	Sku           string         `json:"sku"`
	Price         float64        `json:"price"`
	StockQuantity int32          `json:"stock_quantity"`
	ImageUrl      sql.NullString `json:"image_url"`
	VariantName   sql.NullString `json:"variant_name"`
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     time.Time      `json:"updated_at"`
}

type ShippingOption struct {
	ID            uuid.UUID      `json:"id"`
	Name          string         `json:"name"`
	Description   sql.NullString `json:"description"`
	Price         float64        `json:"price"`
	EstimatedDays sql.NullString `json:"estimated_days"`
	SortOrder     sql.NullInt32  `json:"sort_order"`
	IsActive      bool           `json:"is_active"`
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     time.Time      `json:"updated_at"`
}

type User struct {
	ID           uuid.UUID `json:"id"`
	Email        string    `json:"email"`
	FullName     string    `json:"full_name"`
	PasswordHash string    `json:"password_hash"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
	IsAdmin      bool      `json:"is_admin"`
}
